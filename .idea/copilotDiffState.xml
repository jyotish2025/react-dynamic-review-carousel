<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/components/reviews-carousel.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/reviews-carousel.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { useState, useEffect, useRef } from &quot;react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;&#10;import { ChevronLeft, ChevronRight, Star } from &quot;lucide-react&quot;&#10;&#10;interface Review {&#10;  author_name: string&#10;  author_url?: string&#10;  language: string&#10;  profile_photo_url?: string&#10;  rating: number&#10;  relative_time_description: string&#10;  text: string&#10;  time: number&#10;}&#10;&#10;interface ReviewsCarouselProps {&#10;  placeId: string&#10;}&#10;&#10;export default function ReviewsCarousel({ placeId }: ReviewsCarouselProps) {&#10;  const [reviews, setReviews] = useState&lt;Review[]&gt;([])&#10;  const [currentIndex, setCurrentIndex] = useState(0)&#10;  const [loading, setLoading] = useState(true)&#10;  const [error, setError] = useState&lt;string | null&gt;(null)&#10;  const [isMobile, setIsMobile] = useState(false)&#10;  const containerRef = useRef&lt;HTMLDivElement&gt;(null)&#10;&#10;  // Check if mobile view&#10;  useEffect(() =&gt; {&#10;    const checkMobile = () =&gt; {&#10;      setIsMobile(window.innerWidth &lt; 768)&#10;    }&#10;&#10;    checkMobile()&#10;    window.addEventListener(&quot;resize&quot;, checkMobile)&#10;    return () =&gt; window.removeEventListener(&quot;resize&quot;, checkMobile)&#10;  }, [])&#10;&#10;  // Mock data for demonstration (replace with actual Google Places API call)&#10;  useEffect(() =&gt; {&#10;    const fetchReviews = async () =&gt; {&#10;      try {&#10;        setLoading(true)&#10;&#10;        // Mock reviews data - replace this with actual Google Places API call&#10;        const mockReviews: Review[] = [&#10;          {&#10;            author_name: &quot;Kal T.&quot;,&#10;            rating: 5,&#10;            text: &quot;My goodness is this place the absolute best! Every single interaction I've had with all the staff, starting from front desk, has been so warm and friendly.&quot;,&#10;            relative_time_description: &quot;2 weeks ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Louise B.&quot;,&#10;            rating: 5,&#10;            text: &quot;Amazing experience with KDC! All of the staff were amazing! Faith was very patient with me and kind throughout my dental treatment process. Great experience!&quot;,&#10;            relative_time_description: &quot;1 month ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Victoria S.&quot;,&#10;            rating: 5,&#10;            text: &quot;Amazing experience! It had been a while since my last dental visit and I've been made to feel so comfortable and taken care of. Highly recommend!&quot;,&#10;            relative_time_description: &quot;3 weeks ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Andrea N.&quot;,&#10;            rating: 5,&#10;            text: &quot;Great experience with the team at Kelowna Dental. It's been many years since my last dentist visit but with coming to them, they made me comfortable right away.&quot;,&#10;            relative_time_description: &quot;1 week ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Michael R.&quot;,&#10;            rating: 5,&#10;            text: &quot;Outstanding service and professional care. The entire team made me feel welcome and the treatment was painless. Highly recommend this dental practice!&quot;,&#10;            relative_time_description: &quot;4 days ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Sarah L.&quot;,&#10;            rating: 5,&#10;            text: &quot;Exceptional dental care! The staff is incredibly friendly and professional. They took great care of me and explained everything thoroughly.&quot;,&#10;            relative_time_description: &quot;1 week ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;        ]&#10;&#10;        // Simulate API delay&#10;        await new Promise((resolve) =&gt; setTimeout(resolve, 1000))&#10;&#10;        setReviews(mockReviews)&#10;        setError(null)&#10;      } catch (err) {&#10;        setError(&quot;Failed to fetch reviews&quot;)&#10;        console.error(&quot;Error fetching reviews:&quot;, err)&#10;      } finally {&#10;        setLoading(false)&#10;      }&#10;    }&#10;&#10;    fetchReviews()&#10;  }, [placeId])&#10;&#10;  const reviewsPerPage = isMobile ? 2 : 4&#10;  const maxIndex = Math.max(0, reviews.length - reviewsPerPage)&#10;&#10;  const nextReviews = () =&gt; {&#10;    setCurrentIndex((prev) =&gt; Math.min(prev + reviewsPerPage, maxIndex))&#10;  }&#10;&#10;  const prevReviews = () =&gt; {&#10;    setCurrentIndex((prev) =&gt; Math.max(prev - reviewsPerPage, 0))&#10;  }&#10;&#10;  const renderStars = (rating: number) =&gt; {&#10;    return Array.from({ length: 5 }, (_, i) =&gt; (&#10;      &lt;Star key={i} className={`w-4 h-4 ${i &lt; rating ? &quot;fill-yellow-400 text-yellow-400&quot; : &quot;text-gray-300&quot;}`} /&gt;&#10;    ))&#10;  }&#10;&#10;  const getInitials = (name: string) =&gt; {&#10;    return name&#10;      .split(&quot; &quot;)&#10;      .map((n) =&gt; n[0])&#10;      .join(&quot;&quot;)&#10;      .toUpperCase()&#10;  }&#10;&#10;  const getAvatarColor = (name: string) =&gt; {&#10;    const colors = [&quot;bg-blue-500&quot;, &quot;bg-green-500&quot;, &quot;bg-purple-500&quot;, &quot;bg-orange-500&quot;, &quot;bg-pink-500&quot;, &quot;bg-indigo-500&quot;]&#10;    const index = name.charCodeAt(0) % colors.length&#10;    return colors[index]&#10;  }&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;flex justify-center items-center py-16&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-primary&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;text-center py-16&quot;&gt;&#10;        &lt;p className=&quot;text-red-500 mb-4&quot;&gt;{error}&lt;/p&gt;&#10;        &lt;Button onClick={() =&gt; window.location.reload()}&gt;Try Again&lt;/Button&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  if (reviews.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-center py-16&quot;&gt;&#10;        &lt;p className=&quot;text-muted-foreground&quot;&gt;No reviews available&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  const visibleReviews = reviews.slice(currentIndex, currentIndex + reviewsPerPage)&#10;&#10;  return (&#10;    &lt;div className=&quot;relative&quot;&gt;&#10;      {/* Reviews Grid */}&#10;      &lt;div&#10;        ref={containerRef}&#10;        className={`grid gap-6 mb-8 ${isMobile ? &quot;grid-cols-1 grid-rows-2&quot; : &quot;grid-cols-2 lg:grid-cols-4 grid-rows-1&quot;}`}&#10;      &gt;&#10;        {visibleReviews.map((review, index) =&gt; (&#10;          &lt;Card key={`${review.author_name}-${currentIndex + index}`} className=&quot;h-full&quot;&gt;&#10;            &lt;CardContent className=&quot;p-6 flex flex-col h-full&quot;&gt;&#10;              {/* Author Info */}&#10;              &lt;div className=&quot;flex items-center mb-4&quot;&gt;&#10;                &lt;div&#10;                  className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold text-sm ${getAvatarColor(review.author_name)}`}&#10;                &gt;&#10;                  {getInitials(review.author_name)}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;ml-3&quot;&gt;&#10;                  &lt;h3 className=&quot;font-semibold text-foreground&quot;&gt;{review.author_name}&lt;/h3&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    {renderStars(review.rating)}&#10;                    &lt;span className=&quot;ml-2 text-sm text-muted-foreground&quot;&gt;{review.rating}.0&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Review Text */}&#10;              &lt;div className=&quot;flex-1&quot;&gt;&#10;                &lt;p className=&quot;text-muted-foreground text-sm leading-relaxed&quot;&gt;{review.text}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Time */}&#10;              &lt;div className=&quot;mt-4 pt-4 border-t border-border&quot;&gt;&#10;                &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;{review.relative_time_description}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Navigation */}&#10;      &lt;div className=&quot;flex justify-center items-center space-x-4&quot;&gt;&#10;        &lt;Button&#10;          variant=&quot;outline&quot;&#10;          size=&quot;icon&quot;&#10;          onClick={prevReviews}&#10;          disabled={currentIndex === 0}&#10;          className=&quot;rounded-full bg-transparent&quot;&#10;        &gt;&#10;          &lt;ChevronLeft className=&quot;w-4 h-4&quot; /&gt;&#10;        &lt;/Button&gt;&#10;&#10;        {/* Pagination Dots */}&#10;        &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;          {Array.from({ length: Math.ceil(reviews.length / reviewsPerPage) }, (_, i) =&gt; (&#10;            &lt;button&#10;              key={i}&#10;              onClick={() =&gt; setCurrentIndex(i * reviewsPerPage)}&#10;              className={`w-2 h-2 rounded-full transition-colors ${&#10;                Math.floor(currentIndex / reviewsPerPage) === i ? &quot;bg-primary&quot; : &quot;bg-muted&quot;&#10;              }`}&#10;            /&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        &lt;Button&#10;          variant=&quot;outline&quot;&#10;          size=&quot;icon&quot;&#10;          onClick={nextReviews}&#10;          disabled={currentIndex &gt;= maxIndex}&#10;          className=&quot;rounded-full&quot;&#10;        &gt;&#10;          &lt;ChevronRight className=&quot;w-4 h-4&quot; /&gt;&#10;        &lt;/Button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { useState, useEffect, useRef } from &quot;react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;&#10;import { ChevronLeft, ChevronRight, Star } from &quot;lucide-react&quot;&#10;&#10;interface Review {&#10;  author_name: string&#10;  author_url?: string&#10;  language: string&#10;  profile_photo_url?: string&#10;  rating: number&#10;  relative_time_description: string&#10;  text: string&#10;  time: number&#10;}&#10;&#10;interface ReviewsCarouselProps {&#10;  placeId: string&#10;}&#10;&#10;// This component displays a carousel of user reviews for a given place.&#10;// It uses mock data for demonstration, but can be connected to a real API.&#10;export default function ReviewsCarousel({ placeId }: ReviewsCarouselProps) {&#10;  // State for reviews, current page, loading, error, and mobile detection&#10;  const [reviewList, setReviewList] = useState&lt;Review[]&gt;([])&#10;  const [activePage, setActivePage] = useState(0)&#10;  const [isLoading, setIsLoading] = useState(true)&#10;  const [errorMsg, setErrorMsg] = useState&lt;string | null&gt;(null)&#10;  const [mobileView, setMobileView] = useState(false)&#10;  const carouselRef = useRef&lt;HTMLDivElement&gt;(null)&#10;&#10;  // Detect mobile view based on window width&#10;  useEffect(() =&gt; {&#10;    function handleResize() {&#10;      setMobileView(window.innerWidth &lt; 768)&#10;    }&#10;    handleResize()&#10;    window.addEventListener(&quot;resize&quot;, handleResize)&#10;    return () =&gt; window.removeEventListener(&quot;resize&quot;, handleResize)&#10;  }, [])&#10;&#10;  // Fetch reviews (mocked for now)&#10;  useEffect(() =&gt; {&#10;    async function getReviews() {&#10;      try {&#10;        setIsLoading(true)&#10;        // Simulate fetching reviews from an API&#10;        const demoReviews: Review[] = [&#10;          {&#10;            author_name: &quot;Kal T.&quot;,&#10;            rating: 5,&#10;            text: &quot;My goodness is this place the absolute best! Every single interaction I've had with all the staff, starting from front desk, has been so warm and friendly.&quot;,&#10;            relative_time_description: &quot;2 weeks ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Louise B.&quot;,&#10;            rating: 5,&#10;            text: &quot;Amazing experience with KDC! All of the staff were amazing! Faith was very patient with me and kind throughout my dental treatment process. Great experience!&quot;,&#10;            relative_time_description: &quot;1 month ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Victoria S.&quot;,&#10;            rating: 5,&#10;            text: &quot;Amazing experience! It had been a while since my last dental visit and I've been made to feel so comfortable and taken care of. Highly recommend!&quot;,&#10;            relative_time_description: &quot;3 weeks ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Andrea N.&quot;,&#10;            rating: 5,&#10;            text: &quot;Great experience with the team at Kelowna Dental. It's been many years since my last dentist visit but with coming to them, they made me comfortable right away.&quot;,&#10;            relative_time_description: &quot;1 week ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Michael R.&quot;,&#10;            rating: 5,&#10;            text: &quot;Outstanding service and professional care. The entire team made me feel welcome and the treatment was painless. Highly recommend this dental practice!&quot;,&#10;            relative_time_description: &quot;4 days ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;          {&#10;            author_name: &quot;Sarah L.&quot;,&#10;            rating: 5,&#10;            text: &quot;Exceptional dental care! The staff is incredibly friendly and professional. They took great care of me and explained everything thoroughly.&quot;,&#10;            relative_time_description: &quot;1 week ago&quot;,&#10;            time: Date.now(),&#10;            language: &quot;en&quot;,&#10;          },&#10;        ]&#10;        await new Promise((resolve) =&gt; setTimeout(resolve, 1000))&#10;        setReviewList(demoReviews)&#10;        setErrorMsg(null)&#10;      } catch (err) {&#10;        setErrorMsg(&quot;Could not load reviews.&quot;)&#10;        // Log error for debugging&#10;        console.error(&quot;Review fetch error:&quot;, err)&#10;      } finally {&#10;        setIsLoading(false)&#10;      }&#10;    }&#10;    getReviews()&#10;  }, [placeId])&#10;&#10;  // Number of reviews per page depends on device&#10;  const reviewsPerPage = mobileView ? 2 : 4&#10;  const lastPageIndex = Math.max(0, reviewList.length - reviewsPerPage)&#10;&#10;  // Move to next set of reviews&#10;  function goToNext() {&#10;    setActivePage((prev) =&gt; Math.min(prev + reviewsPerPage, lastPageIndex))&#10;  }&#10;&#10;  // Move to previous set of reviews&#10;  function goToPrev() {&#10;    setActivePage((prev) =&gt; Math.max(prev - reviewsPerPage, 0))&#10;  }&#10;&#10;  // Render star icons for rating&#10;  function showStars(rating: number) {&#10;    return Array.from({ length: 5 }, (_, i) =&gt; (&#10;      &lt;Star key={i} className={`w-4 h-4 ${i &lt; rating ? &quot;fill-yellow-400 text-yellow-400&quot; : &quot;text-gray-300&quot;}`} /&gt;&#10;    ))&#10;  }&#10;&#10;  // Get initials from author name&#10;  function initialsFromName(name: string) {&#10;    return name&#10;      .split(&quot; &quot;)&#10;      .map((n) =&gt; n[0])&#10;      .join(&quot;&quot;)&#10;      .toUpperCase()&#10;  }&#10;&#10;  // Pick avatar color based on name&#10;  function pickAvatarColor(name: string) {&#10;    const colorOptions = [&quot;bg-blue-500&quot;, &quot;bg-green-500&quot;, &quot;bg-purple-500&quot;, &quot;bg-orange-500&quot;, &quot;bg-pink-500&quot;, &quot;bg-indigo-500&quot;]&#10;    const idx = name.charCodeAt(0) % colorOptions.length&#10;    return colorOptions[idx]&#10;  }&#10;&#10;  // Loading spinner&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;flex justify-center items-center py-16&quot;&gt;&#10;        &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-primary&quot;&gt;&lt;/div&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  // Error message&#10;  if (errorMsg) {&#10;    return (&#10;      &lt;div className=&quot;text-center py-16&quot;&gt;&#10;        &lt;p className=&quot;text-red-500 mb-4&quot;&gt;{errorMsg}&lt;/p&gt;&#10;        &lt;Button onClick={() =&gt; window.location.reload()}&gt;Try Again&lt;/Button&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  // No reviews found&#10;  if (reviewList.length === 0) {&#10;    return (&#10;      &lt;div className=&quot;text-center py-16&quot;&gt;&#10;        &lt;p className=&quot;text-muted-foreground&quot;&gt;No reviews available&lt;/p&gt;&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  // Get reviews for current page&#10;  const currentReviews = reviewList.slice(activePage, activePage + reviewsPerPage)&#10;&#10;  // Main carousel UI&#10;  return (&#10;    &lt;div className=&quot;relative&quot;&gt;&#10;      {/* Reviews Grid */}&#10;      &lt;div&#10;        ref={carouselRef}&#10;        className={`grid gap-6 mb-8 ${mobileView ? &quot;grid-cols-1 grid-rows-2&quot; : &quot;grid-cols-2 lg:grid-cols-4 grid-rows-1&quot;}`}&#10;      &gt;&#10;        {currentReviews.map((review, idx) =&gt; (&#10;          &lt;Card key={`${review.author_name}-${activePage + idx}`} className=&quot;h-full&quot;&gt;&#10;            &lt;CardContent className=&quot;p-6 flex flex-col h-full&quot;&gt;&#10;              {/* Author Info */}&#10;              &lt;div className=&quot;flex items-center mb-4&quot;&gt;&#10;                &lt;div&#10;                  className={`w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold text-sm ${pickAvatarColor(review.author_name)}`}&#10;                &gt;&#10;                  {initialsFromName(review.author_name)}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;ml-3&quot;&gt;&#10;                  &lt;h3 className=&quot;font-semibold text-foreground&quot;&gt;{review.author_name}&lt;/h3&gt;&#10;                  &lt;div className=&quot;flex items-center&quot;&gt;&#10;                    {showStars(review.rating)}&#10;                    &lt;span className=&quot;ml-2 text-sm text-muted-foreground&quot;&gt;{review.rating}.0&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Review Text */}&#10;              &lt;div className=&quot;flex-1&quot;&gt;&#10;                &lt;p className=&quot;text-muted-foreground text-sm leading-relaxed&quot;&gt;{review.text}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Time */}&#10;              &lt;div className=&quot;mt-4 pt-4 border-t border-border&quot;&gt;&#10;                &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;{review.relative_time_description}&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;&#10;      {/* Navigation */}&#10;      &lt;div className=&quot;flex justify-center items-center space-x-4&quot;&gt;&#10;        &lt;Button&#10;          variant=&quot;outline&quot;&#10;          size=&quot;icon&quot;&#10;          onClick={goToPrev}&#10;          disabled={activePage === 0}&#10;          className=&quot;rounded-full bg-transparent&quot;&#10;        &gt;&#10;          &lt;ChevronLeft className=&quot;w-4 h-4&quot; /&gt;&#10;        &lt;/Button&gt;&#10;&#10;        {/* Pagination Dots */}&#10;        &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;          {Array.from({ length: Math.ceil(reviewList.length / reviewsPerPage) }, (_, i) =&gt; (&#10;            &lt;button&#10;              key={i}&#10;              onClick={() =&gt; setActivePage(i * reviewsPerPage)}&#10;              className={`w-2 h-2 rounded-full transition-colors ${&#10;                Math.floor(activePage / reviewsPerPage) === i ? &quot;bg-primary&quot; : &quot;bg-muted&quot;&#10;              }`}&#10;            /&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        &lt;Button&#10;          variant=&quot;outline&quot;&#10;          size=&quot;icon&quot;&#10;          onClick={goToNext}&#10;          disabled={activePage &gt;= lastPageIndex}&#10;          className=&quot;rounded-full&quot;&#10;        &gt;&#10;          &lt;ChevronRight className=&quot;w-4 h-4&quot; /&gt;&#10;        &lt;/Button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/theme-provider.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/theme-provider.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import * as React from 'react'&#10;import {&#10;  ThemeProvider as NextThemesProvider,&#10;  type ThemeProviderProps,&#10;} from 'next-themes'&#10;&#10;export function ThemeProvider({ children, ...props }: ThemeProviderProps) {&#10;  return &lt;NextThemesProvider {...props}&gt;{children}&lt;/NextThemesProvider&gt;&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#10;&#10;import * as React from 'react'&#10;import {&#10;  ThemeProvider as NextThemesProvider,&#10;  type ThemeProviderProps,&#10;} from 'next-themes'&#10;&#10;// ThemeProvider wraps the app and provides theme context using next-themes.&#10;export function ThemeProvider({ children, ...props }: ThemeProviderProps) {&#10;  // Human note: You can add custom logic here if you want to extend theme switching.&#10;  return &lt;NextThemesProvider {...props}&gt;{children}&lt;/NextThemesProvider&gt;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>